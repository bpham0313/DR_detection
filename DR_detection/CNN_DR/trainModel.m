clear
modfile='myMLmodel.h5';

layers = importKerasLayers(modfile);
%layers(1:165) = freezeWeights(layers(1:165));
trainfilepath='train';
valfilepath='val';
 trainDS= imageDatastore(trainfilepath,...  
    'IncludeSubfolders',true,...
    'LabelSource','foldernames'); 
valDS = imageDatastore(valfilepath,...  
    'IncludeSubfolders',true,...
    'LabelSource','foldernames'); 
% sizeRequirement = net.Layers(1).InputSize;
% inputSize = sizeRequirement(1:2);
DS = struct;
DS.auTrainDS = augmentedImageDatastore([299,299,3],trainDS);
DS.auValDS = augmentedImageDatastore([299,299,3],valDS);
initiallearnrate = 0.0001;
valData         = DS.auValDS;
valDataPatience = 5;

trainOpts = trainingOptions('adam',...
    'MaxEpochs',30, ...
    'LearnRateSchedule' ,'piecewise',...
    'InitialLearnRate',initiallearnrate,...
    'ValidationData',valData,...
    'Plots','training-progress',...
    'LearnRateDropFactor',0.2, ...
    'LearnRateDropPeriod',10, ...
    'ValidationFrequency',30, ...
    'MiniBatchSize', 64,...
    'ValidationPatience', valDataPatience);
convnet= trainNetwork(DS.auTrainDS, layers, trainOpts);
%%
clear
net = inceptionv3; 
layers = net.Layers;
layers=layers(1:end-3);

% layers(end+1)= fullyConnectedLayer(4096,'Name','fc_1');
% layers(end+1)= reluLayer;
% layers(end+1)= batchNormalizationLayer;
% layers(end+1)= fullyConnectedLayer(4096,'Name','fc_2');
% layers(end+1)= reluLayer;
% layers(end+1)= batchNormalizationLayer;
layers(end+1)= fullyConnectedLayer(3,'Name','fc_3');
layers(end+1)=softmaxLayer;
layers(end+1)=classificationLayer();


trainfilepath='train';
valfilepath='val';
 trainDS= imageDatastore(trainfilepath,...  
    'IncludeSubfolders',true,...
    'LabelSource','foldernames'); 
valDS = imageDatastore(trainfilepath,...  
    'IncludeSubfolders',true,...
    'LabelSource','foldernames'); 
sizeRequirement = net.Layers(1).InputSize;
inputSize = sizeRequirement(1:2);
DS = struct;
DS.auTrainDS = augmentedImageDatastore(inputSize,trainDS);
DS.auValDS = augmentedImageDatastore(inputSize,valDS);
initiallearnrate = 0.0001;
valData         = DS.auValDS;
valDataPatience = 5;

trainOpts = trainingOptions('adam',...
    'MaxEpochs',30, ...
    'LearnRateSchedule' ,'piecewise',...
    'InitialLearnRate',initiallearnrate,...
    'ValidationData',valData,...
    'Plots','training-progress',...
    'LearnRateDropFactor',0.2, ...
    'LearnRateDropPeriod',10, ...
    'ValidationFrequency',30, ...
    'MiniBatchSize', 64,...
    'ValidationPatience', valDataPatience);
convnet= trainNetwork(valDS, layers, trainOpts);